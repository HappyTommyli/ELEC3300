
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001884  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a8c  08001a8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a8c  08001a8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a8c  08001a8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a8c  08001a8c  00011a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08001aa0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08001aa0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c218  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  0002c24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a709  00000000  00000000  0002dd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00038428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001470  00000000  00000000  00038b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018567  00000000  00000000  00039f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db29  00000000  00000000  000524ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092378  00000000  00000000  00060018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f2390  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001814  00000000  00000000  000f23e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001a50 	.word	0x08001a50

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001a50 	.word	0x08001a50

08000224 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	2300      	movs	r3, #0
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2101      	movs	r1, #1
{
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2401      	movs	r4, #1
 8000232:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800023e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000246:	9208      	str	r2, [sp, #32]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000248:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2202      	movs	r2, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000254:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f000 fcc6 	bl	8000bec <HAL_RCC_OscConfig>
 8000260:	b108      	cbz	r0, 8000266 <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000262:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000264:	e7fe      	b.n	8000264 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000266:	4601      	mov	r1, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	220f      	movs	r2, #15
 800026a:	2302      	movs	r3, #2
 800026c:	2400      	movs	r4, #0
 800026e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000272:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	e9cd 2300 	strd	r2, r3, [sp]
 8000278:	e9cd 4502 	strd	r4, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	f000 fea5 	bl	8000fcc <HAL_RCC_ClockConfig>
 8000282:	4602      	mov	r2, r0
 8000284:	b108      	cbz	r0, 800028a <SystemClock_Config+0x66>
 8000286:	b672      	cpsid	i
  while (1)
 8000288:	e7fe      	b.n	8000288 <SystemClock_Config+0x64>
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800028a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800028e:	f000 ff5f 	bl	8001150 <HAL_RCC_MCOConfig>
}
 8000292:	b011      	add	sp, #68	; 0x44
 8000294:	bd30      	pop	{r4, r5, pc}
 8000296:	bf00      	nop

08000298 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	2400      	movs	r4, #0
{
 800029a:	b580      	push	{r7, lr}
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800029c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
{
 80002a0:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 80002a2:	f000 fabb 	bl	800081c <HAL_Init>
  SystemClock_Config();
 80002a6:	f7ff ffbd 	bl	8000224 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ae:	4b91      	ldr	r3, [pc, #580]	; (80004f4 <main+0x25c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002b0:	4f91      	ldr	r7, [pc, #580]	; (80004f8 <main+0x260>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b4:	4891      	ldr	r0, [pc, #580]	; (80004fc <main+0x264>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	f042 0210 	orr.w	r2, r2, #16
 80002ba:	619a      	str	r2, [r3, #24]
 80002bc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002be:	a90c      	add	r1, sp, #48	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	f002 0210 	and.w	r2, r2, #16
 80002c4:	9201      	str	r2, [sp, #4]
 80002c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	699a      	ldr	r2, [r3, #24]
  htim3.Instance = TIM3;
 80002ca:	4d8d      	ldr	r5, [pc, #564]	; (8000500 <main+0x268>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	f042 0204 	orr.w	r2, r2, #4
 80002d0:	619a      	str	r2, [r3, #24]
 80002d2:	699a      	ldr	r2, [r3, #24]
 80002d4:	f002 0204 	and.w	r2, r2, #4
 80002d8:	9202      	str	r2, [sp, #8]
 80002da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	699a      	ldr	r2, [r3, #24]
 80002de:	f042 0208 	orr.w	r2, r2, #8
 80002e2:	619a      	str	r2, [r3, #24]
 80002e4:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002e6:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ea:	f003 0308 	and.w	r3, r3, #8
 80002ee:	9303      	str	r3, [sp, #12]
 80002f0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f2:	f000 fb3f 	bl	8000974 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002f6:	2201      	movs	r2, #1
 80002f8:	4b7f      	ldr	r3, [pc, #508]	; (80004f8 <main+0x260>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fa:	4882      	ldr	r0, [pc, #520]	; (8000504 <main+0x26c>)
 80002fc:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	f000 fb36 	bl	8000974 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000308:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800030a:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800030e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000310:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000312:	487c      	ldr	r0, [pc, #496]	; (8000504 <main+0x26c>)
 8000314:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000316:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031a:	f000 fb2b 	bl	8000974 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800031e:	4622      	mov	r2, r4
 8000320:	4621      	mov	r1, r4
 8000322:	2006      	movs	r0, #6
 8000324:	f000 fac2 	bl	80008ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000328:	2006      	movs	r0, #6
 800032a:	f000 fafd 	bl	8000928 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800032e:	4622      	mov	r2, r4
 8000330:	4621      	mov	r1, r4
 8000332:	2028      	movs	r0, #40	; 0x28
 8000334:	f000 faba 	bl	80008ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000338:	2028      	movs	r0, #40	; 0x28
 800033a:	f000 faf5 	bl	8000928 <HAL_NVIC_EnableIRQ>
  htim3.Init.Period = 199;
 800033e:	23c7      	movs	r3, #199	; 0xc7
 8000340:	60eb      	str	r3, [r5, #12]
  htim3.Instance = TIM3;
 8000342:	4b71      	ldr	r3, [pc, #452]	; (8000508 <main+0x270>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000344:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000346:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800034a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034e:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000352:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000356:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800035a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000362:	9412      	str	r4, [sp, #72]	; 0x48
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000364:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000366:	61ac      	str	r4, [r5, #24]
  htim3.Instance = TIM3;
 8000368:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800036a:	f000 ff17 	bl	800119c <HAL_TIM_Base_Init>
 800036e:	b108      	cbz	r0, 8000374 <main+0xdc>
 8000370:	b672      	cpsid	i
  while (1)
 8000372:	e7fe      	b.n	8000372 <main+0xda>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000378:	4628      	mov	r0, r5
 800037a:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037c:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800037e:	f001 f9d1 	bl	8001724 <HAL_TIM_ConfigClockSource>
 8000382:	b108      	cbz	r0, 8000388 <main+0xf0>
 8000384:	b672      	cpsid	i
  while (1)
 8000386:	e7fe      	b.n	8000386 <main+0xee>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000388:	4628      	mov	r0, r5
 800038a:	f000 ff87 	bl	800129c <HAL_TIM_PWM_Init>
 800038e:	b108      	cbz	r0, 8000394 <main+0xfc>
 8000390:	b672      	cpsid	i
  while (1)
 8000392:	e7fe      	b.n	8000392 <main+0xfa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000394:	2220      	movs	r2, #32
 8000396:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000398:	4628      	mov	r0, r5
 800039a:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800039c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003a0:	f001 faf8 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 80003a4:	4602      	mov	r2, r0
 80003a6:	b108      	cbz	r0, 80003ac <main+0x114>
 80003a8:	b672      	cpsid	i
  while (1)
 80003aa:	e7fe      	b.n	80003aa <main+0x112>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ac:	2660      	movs	r6, #96	; 0x60
 80003ae:	2778      	movs	r7, #120	; 0x78
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b0:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b2:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b4:	a90c      	add	r1, sp, #48	; 0x30
 80003b6:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b8:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003bc:	f001 f8a2 	bl	8001504 <HAL_TIM_PWM_ConfigChannel>
 80003c0:	4604      	mov	r4, r0
 80003c2:	b108      	cbz	r0, 80003c8 <main+0x130>
 80003c4:	b672      	cpsid	i
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <main+0x12e>
  HAL_TIM_MspPostInit(&htim3);
 80003c8:	4628      	mov	r0, r5
 80003ca:	f000 f93b 	bl	8000644 <HAL_TIM_MspPostInit>
  htim4.Init.Period = 40000/600-1;
 80003ce:	2341      	movs	r3, #65	; 0x41
  htim4.Instance = TIM4;
 80003d0:	4d4e      	ldr	r5, [pc, #312]	; (800050c <main+0x274>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003d2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim4.Init.Period = 40000/600-1;
 80003d6:	60eb      	str	r3, [r5, #12]
  htim4.Instance = TIM4;
 80003d8:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <main+0x278>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003da:	4628      	mov	r0, r5
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003dc:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80003e8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80003ec:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003f4:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	9412      	str	r4, [sp, #72]	; 0x48
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f8:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	61ac      	str	r4, [r5, #24]
  htim4.Instance = TIM4;
 80003fc:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003fe:	f000 fecd 	bl	800119c <HAL_TIM_Base_Init>
 8000402:	b108      	cbz	r0, 8000408 <main+0x170>
 8000404:	b672      	cpsid	i
  while (1)
 8000406:	e7fe      	b.n	8000406 <main+0x16e>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000408:	4628      	mov	r0, r5
 800040a:	f000 ff47 	bl	800129c <HAL_TIM_PWM_Init>
 800040e:	b108      	cbz	r0, 8000414 <main+0x17c>
 8000410:	b672      	cpsid	i
  while (1)
 8000412:	e7fe      	b.n	8000412 <main+0x17a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000414:	2207      	movs	r2, #7
 8000416:	2320      	movs	r3, #32
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000418:	4628      	mov	r0, r5
 800041a:	a906      	add	r1, sp, #24
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800041c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000420:	f001 fa30 	bl	8001884 <HAL_TIM_SlaveConfigSynchro>
 8000424:	b108      	cbz	r0, 800042a <main+0x192>
 8000426:	b672      	cpsid	i
  while (1)
 8000428:	e7fe      	b.n	8000428 <main+0x190>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042a:	2200      	movs	r2, #0
 800042c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800042e:	4628      	mov	r0, r5
 8000430:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000432:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000436:	f001 faad 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 800043a:	4602      	mov	r2, r0
 800043c:	b108      	cbz	r0, 8000442 <main+0x1aa>
 800043e:	b672      	cpsid	i
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x1a8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000442:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000444:	2460      	movs	r4, #96	; 0x60
 8000446:	2527      	movs	r5, #39	; 0x27
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000448:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044e:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000450:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000452:	f001 f857 	bl	8001504 <HAL_TIM_PWM_ConfigChannel>
 8000456:	b108      	cbz	r0, 800045c <main+0x1c4>
 8000458:	b672      	cpsid	i
  while (1)
 800045a:	e7fe      	b.n	800045a <main+0x1c2>
  HAL_TIM_MspPostInit(&htim4);
 800045c:	482b      	ldr	r0, [pc, #172]	; (800050c <main+0x274>)
 800045e:	f000 f8f1 	bl	8000644 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000462:	2300      	movs	r3, #0
  htim5.Instance = TIM5;
 8000464:	4c2b      	ldr	r4, [pc, #172]	; (8000514 <main+0x27c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800046a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000472:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8000476:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800047a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800047e:	9312      	str	r3, [sp, #72]	; 0x48
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000480:	60a3      	str	r3, [r4, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000482:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	61a3      	str	r3, [r4, #24]
  htim5.Init.Period = 1600-1;
 8000486:	f240 633f 	movw	r3, #1599	; 0x63f
  htim5.Init.Prescaler = 100-1;
 800048a:	2263      	movs	r2, #99	; 0x63
  htim5.Init.Period = 1600-1;
 800048c:	60e3      	str	r3, [r4, #12]
  htim5.Instance = TIM5;
 800048e:	4b22      	ldr	r3, [pc, #136]	; (8000518 <main+0x280>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000490:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 100-1;
 8000492:	6062      	str	r2, [r4, #4]
  htim5.Instance = TIM5;
 8000494:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000496:	f000 fe81 	bl	800119c <HAL_TIM_Base_Init>
 800049a:	b108      	cbz	r0, 80004a0 <main+0x208>
 800049c:	b672      	cpsid	i
  while (1)
 800049e:	e7fe      	b.n	800049e <main+0x206>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80004a4:	4620      	mov	r0, r4
 80004a6:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a8:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80004aa:	f001 f93b 	bl	8001724 <HAL_TIM_ConfigClockSource>
 80004ae:	b108      	cbz	r0, 80004b4 <main+0x21c>
 80004b0:	b672      	cpsid	i
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <main+0x21a>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80004b4:	4620      	mov	r0, r4
 80004b6:	f000 fef1 	bl	800129c <HAL_TIM_PWM_Init>
 80004ba:	b108      	cbz	r0, 80004c0 <main+0x228>
 80004bc:	b672      	cpsid	i
  while (1)
 80004be:	e7fe      	b.n	80004be <main+0x226>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80004c4:	4620      	mov	r0, r4
 80004c6:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80004cc:	f001 fa62 	bl	8001994 <HAL_TIMEx_MasterConfigSynchronization>
 80004d0:	b108      	cbz	r0, 80004d6 <main+0x23e>
 80004d2:	b672      	cpsid	i
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x23c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d6:	2660      	movs	r6, #96	; 0x60
 80004d8:	2777      	movs	r7, #119	; 0x77
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004da:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004dc:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004de:	2208      	movs	r2, #8
 80004e0:	4620      	mov	r0, r4
 80004e2:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004e8:	f001 f80c 	bl	8001504 <HAL_TIM_PWM_ConfigChannel>
 80004ec:	b1b0      	cbz	r0, 800051c <main+0x284>
 80004ee:	b672      	cpsid	i
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x258>
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	10110000 	.word	0x10110000
 80004fc:	40011000 	.word	0x40011000
 8000500:	20000028 	.word	0x20000028
 8000504:	40010800 	.word	0x40010800
 8000508:	40000400 	.word	0x40000400
 800050c:	20000070 	.word	0x20000070
 8000510:	40000800 	.word	0x40000800
 8000514:	200000b8 	.word	0x200000b8
 8000518:	40000c00 	.word	0x40000c00
  HAL_TIM_MspPostInit(&htim5);
 800051c:	4620      	mov	r0, r4
 800051e:	f000 f891 	bl	8000644 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000522:	4f15      	ldr	r7, [pc, #84]	; (8000578 <main+0x2e0>)
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 8000524:	4e15      	ldr	r6, [pc, #84]	; (800057c <main+0x2e4>)
 8000526:	4d16      	ldr	r5, [pc, #88]	; (8000580 <main+0x2e8>)
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	4638      	mov	r0, r7
 800052c:	f000 ff34 	bl	8001398 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	4814      	ldr	r0, [pc, #80]	; (8000584 <main+0x2ec>)
 8000534:	f000 ff30 	bl	8001398 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000538:	2108      	movs	r1, #8
 800053a:	4813      	ldr	r0, [pc, #76]	; (8000588 <main+0x2f0>)
 800053c:	f000 ff2c 	bl	8001398 <HAL_TIM_PWM_Start>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	4630      	mov	r0, r6
 8000546:	f000 fb3d 	bl	8000bc4 <HAL_GPIO_ReadPin>
 800054a:	2801      	cmp	r0, #1
 800054c:	4601      	mov	r1, r0
 800054e:	d1eb      	bne.n	8000528 <main+0x290>
 8000550:	4628      	mov	r0, r5
 8000552:	f000 fb37 	bl	8000bc4 <HAL_GPIO_ReadPin>
 8000556:	2801      	cmp	r0, #1
 8000558:	d1e6      	bne.n	8000528 <main+0x290>
		  HAL_Delay(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 f982 	bl	8000864 <HAL_Delay>
      HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8000560:	2108      	movs	r1, #8
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x2f0>)
 8000564:	f000 ff82 	bl	800146c <HAL_TIM_PWM_Stop>
      __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pulse);
 8000568:	2277      	movs	r2, #119	; 0x77
 800056a:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800056c:	2108      	movs	r1, #8
      __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pulse);
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x2f0>)
 8000572:	f000 ff11 	bl	8001398 <HAL_TIM_PWM_Start>
  }
 8000576:	e7d7      	b.n	8000528 <main+0x290>
 8000578:	20000028 	.word	0x20000028
 800057c:	40011000 	.word	0x40011000
 8000580:	40010800 	.word	0x40010800
 8000584:	20000070 	.word	0x20000070
 8000588:	200000b8 	.word	0x200000b8

0800058c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_MspInit+0x3c>)
{
 800058e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000590:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000592:	490e      	ldr	r1, [pc, #56]	; (80005cc <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000594:	f042 0201 	orr.w	r2, r2, #1
 8000598:	619a      	str	r2, [r3, #24]
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	f002 0201 	and.w	r2, r2, #1
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	69da      	ldr	r2, [r3, #28]
 80005a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005aa:	61da      	str	r2, [r3, #28]
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b6:	684b      	ldr	r3, [r1, #4]
 80005b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	b002      	add	sp, #8
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80005d0:	4a18      	ldr	r2, [pc, #96]	; (8000634 <HAL_TIM_Base_MspInit+0x64>)
 80005d2:	6803      	ldr	r3, [r0, #0]
{
 80005d4:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM3)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d013      	beq.n	8000602 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <HAL_TIM_Base_MspInit+0x68>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d004      	beq.n	80005ea <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <HAL_TIM_Base_MspInit+0x6c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d019      	beq.n	800061a <HAL_TIM_Base_MspInit+0x4a>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80005e6:	b004      	add	sp, #16
 80005e8:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_TIM_Base_MspInit+0x70>)
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	f042 0204 	orr.w	r2, r2, #4
 80005f2:	61da      	str	r2, [r3, #28]
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	9b02      	ldr	r3, [sp, #8]
}
 80005fe:	b004      	add	sp, #16
 8000600:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_TIM_Base_MspInit+0x70>)
 8000604:	69da      	ldr	r2, [r3, #28]
 8000606:	f042 0202 	orr.w	r2, r2, #2
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	9b01      	ldr	r3, [sp, #4]
}
 8000616:	b004      	add	sp, #16
 8000618:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x70>)
 800061c:	69da      	ldr	r2, [r3, #28]
 800061e:	f042 0208 	orr.w	r2, r2, #8
 8000622:	61da      	str	r2, [r3, #28]
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	9303      	str	r3, [sp, #12]
 800062c:	9b03      	ldr	r3, [sp, #12]
}
 800062e:	b004      	add	sp, #16
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40000400 	.word	0x40000400
 8000638:	40000800 	.word	0x40000800
 800063c:	40000c00 	.word	0x40000c00
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	2300      	movs	r3, #0
{
 8000646:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM3)
 8000648:	492b      	ldr	r1, [pc, #172]	; (80006f8 <HAL_TIM_MspPostInit+0xb4>)
 800064a:	6802      	ldr	r2, [r0, #0]
{
 800064c:	b088      	sub	sp, #32
  if(htim->Instance==TIM3)
 800064e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000654:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(htim->Instance==TIM3)
 8000658:	d007      	beq.n	800066a <HAL_TIM_MspPostInit+0x26>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <HAL_TIM_MspPostInit+0xb8>)
 800065c:	429a      	cmp	r2, r3
 800065e:	d01d      	beq.n	800069c <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <HAL_TIM_MspPostInit+0xbc>)
 8000662:	429a      	cmp	r2, r3
 8000664:	d031      	beq.n	80006ca <HAL_TIM_MspPostInit+0x86>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000666:	b008      	add	sp, #32
 8000668:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800066a:	2440      	movs	r4, #64	; 0x40
 800066c:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000674:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000678:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	4822      	ldr	r0, [pc, #136]	; (8000704 <HAL_TIM_MspPostInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	f042 0204 	orr.w	r2, r2, #4
 8000680:	619a      	str	r2, [r3, #24]
 8000682:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800068c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000692:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f000 f96e 	bl	8000974 <HAL_GPIO_Init>
}
 8000698:	b008      	add	sp, #32
 800069a:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800069c:	2440      	movs	r4, #64	; 0x40
 800069e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2603      	movs	r6, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80006a6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	4817      	ldr	r0, [pc, #92]	; (8000708 <HAL_TIM_MspPostInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	f042 0208 	orr.w	r2, r2, #8
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006ba:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f000 f957 	bl	8000974 <HAL_GPIO_Init>
}
 80006c6:	b008      	add	sp, #32
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ca:	2404      	movs	r4, #4
 80006cc:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80006d4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <HAL_TIM_MspPostInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	f042 0204 	orr.w	r2, r2, #4
 80006dc:	619a      	str	r2, [r3, #24]
 80006de:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f000 f940 	bl	8000974 <HAL_GPIO_Init>
}
 80006f4:	b008      	add	sp, #32
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	40000400 	.word	0x40000400
 80006fc:	40000800 	.word	0x40000800
 8000700:	40000c00 	.word	0x40000c00
 8000704:	40010800 	.word	0x40010800
 8000708:	40010c00 	.word	0x40010c00

0800070c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler>
 800070e:	bf00      	nop

08000710 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <HardFault_Handler>
 8000712:	bf00      	nop

08000714 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler>
 8000716:	bf00      	nop

08000718 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <BusFault_Handler>
 800071a:	bf00      	nop

0800071c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler>
 800071e:	bf00      	nop

08000720 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <DebugMon_Handler>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <PendSV_Handler>:
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 b888 	b.w	8000840 <HAL_IncTick>

08000730 <EXTI0_IRQHandler>:
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pulse);
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
}
void EXTI0_IRQHandler(void)
{
 8000730:	b510      	push	{r4, lr}
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8000732:	4c08      	ldr	r4, [pc, #32]	; (8000754 <EXTI0_IRQHandler+0x24>)
 8000734:	2108      	movs	r1, #8
 8000736:	4620      	mov	r0, r4
 8000738:	f000 fe98 	bl	800146c <HAL_TIM_PWM_Stop>
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pulse);
 800073c:	2292      	movs	r2, #146	; 0x92
 800073e:	6823      	ldr	r3, [r4, #0]
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000740:	4620      	mov	r0, r4
 8000742:	2108      	movs	r1, #8
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pulse);
 8000744:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000746:	f000 fe27 	bl	8001398 <HAL_TIM_PWM_Start>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800074a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800074e:	2001      	movs	r0, #1
 8000750:	f000 ba40 	b.w	8000bd4 <HAL_GPIO_EXTI_IRQHandler>
 8000754:	200000b8 	.word	0x200000b8

08000758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000758:	b510      	push	{r4, lr}
    HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 800075a:	4c09      	ldr	r4, [pc, #36]	; (8000780 <EXTI15_10_IRQHandler+0x28>)
 800075c:	2108      	movs	r1, #8
 800075e:	4620      	mov	r0, r4
 8000760:	f000 fe84 	bl	800146c <HAL_TIM_PWM_Stop>
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pulse);
 8000764:	225d      	movs	r2, #93	; 0x5d
 8000766:	6823      	ldr	r3, [r4, #0]
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000768:	4620      	mov	r0, r4
 800076a:	2108      	movs	r1, #8
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, pulse);
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800076e:	f000 fe13 	bl	8001398 <HAL_TIM_PWM_Start>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000776:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800077a:	f000 ba2b 	b.w	8000bd4 <HAL_GPIO_EXTI_IRQHandler>
 800077e:	bf00      	nop
 8000780:	200000b8 	.word	0x200000b8

08000784 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000788:	f7ff fffc 	bl	8000784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800078e:	490c      	ldr	r1, [pc, #48]	; (80007c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000790:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a4:	4c09      	ldr	r4, [pc, #36]	; (80007cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b2:	f001 f929 	bl	8001a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b6:	f7ff fd6f 	bl	8000298 <main>
  bx lr
 80007ba:	4770      	bx	lr
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c4:	08001a94 	.word	0x08001a94
  ldr r2, =_sbss
 80007c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007cc:	20000104 	.word	0x20000104

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>
	...

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <HAL_InitTick+0x3c>)
{
 80007dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007de:	7811      	ldrb	r1, [r2, #0]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <HAL_InitTick+0x40>)
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	fbb2 f0f3 	udiv	r0, r2, r3
 80007ec:	f000 f8aa 	bl	8000944 <HAL_SYSTICK_Config>
 80007f0:	b908      	cbnz	r0, 80007f6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f2:	2d0f      	cmp	r5, #15
 80007f4:	d901      	bls.n	80007fa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80007f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80007f8:	bd38      	pop	{r3, r4, r5, pc}
 80007fa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	4602      	mov	r2, r0
 80007fe:	4629      	mov	r1, r5
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f852 	bl	80008ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_InitTick+0x44>)
 800080a:	4620      	mov	r0, r4
 800080c:	601d      	str	r5, [r3, #0]
}
 800080e:	bd38      	pop	{r3, r4, r5, pc}
 8000810:	20000004 	.word	0x20000004
 8000814:	20000000 	.word	0x20000000
 8000818:	20000008 	.word	0x20000008

0800081c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x20>)
{
 800081e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000822:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	f043 0310 	orr.w	r3, r3, #16
 8000828:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082a:	f000 f82d 	bl	8000888 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	200f      	movs	r0, #15
 8000830:	f7ff ffd0 	bl	80007d4 <HAL_InitTick>
  HAL_MspInit();
 8000834:	f7ff feaa 	bl	800058c <HAL_MspInit>
}
 8000838:	2000      	movs	r0, #0
 800083a:	bd08      	pop	{r3, pc}
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000840:	4a03      	ldr	r2, [pc, #12]	; (8000850 <HAL_IncTick+0x10>)
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_IncTick+0x14>)
 8000844:	6811      	ldr	r1, [r2, #0]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	440b      	add	r3, r1
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000100 	.word	0x20000100
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000858:	4b01      	ldr	r3, [pc, #4]	; (8000860 <HAL_GetTick+0x8>)
 800085a:	6818      	ldr	r0, [r3, #0]
}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000100 	.word	0x20000100

08000864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff fff6 	bl	8000858 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800086e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000870:	d002      	beq.n	8000878 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <HAL_Delay+0x20>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000878:	f7ff ffee 	bl	8000858 <HAL_GetTick>
 800087c:	1b40      	subs	r0, r0, r5
 800087e:	42a0      	cmp	r0, r4
 8000880:	d3fa      	bcc.n	8000878 <HAL_Delay+0x14>
  {
  }
}
 8000882:	bd38      	pop	{r3, r4, r5, pc}
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000888:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800088e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000892:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008a4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ae:	b500      	push	{lr}
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b6:	f1c3 0e07 	rsb	lr, r3, #7
 80008ba:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c2:	bf28      	it	cs
 80008c4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c8:	f1bc 0f06 	cmp.w	ip, #6
 80008cc:	d91b      	bls.n	8000906 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ce:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	fa0c fc03 	lsl.w	ip, ip, r3
 80008d8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 3cff 	mov.w	ip, #4294967295
 80008e0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80008e4:	ea21 010c 	bic.w	r1, r1, ip
 80008e8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80008ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80008f0:	db0c      	blt.n	800090c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	0109      	lsls	r1, r1, #4
 80008f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008f8:	b2c9      	uxtb	r1, r1
 80008fa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80008fe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000902:	f85d fb04 	ldr.w	pc, [sp], #4
 8000906:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000908:	4613      	mov	r3, r2
 800090a:	e7e7      	b.n	80008dc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_NVIC_SetPriority+0x78>)
 800090e:	f000 000f 	and.w	r0, r0, #15
 8000912:	0109      	lsls	r1, r1, #4
 8000914:	b2c9      	uxtb	r1, r1
 8000916:	4403      	add	r3, r0
 8000918:	7619      	strb	r1, [r3, #24]
 800091a:	f85d fb04 	ldr.w	pc, [sp], #4
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00
 8000924:	e000ecfc 	.word	0xe000ecfc

08000928 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000928:	2800      	cmp	r0, #0
 800092a:	db07      	blt.n	800093c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092c:	2301      	movs	r3, #1
 800092e:	f000 011f 	and.w	r1, r0, #31
 8000932:	4a03      	ldr	r2, [pc, #12]	; (8000940 <HAL_NVIC_EnableIRQ+0x18>)
 8000934:	0940      	lsrs	r0, r0, #5
 8000936:	408b      	lsls	r3, r1
 8000938:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100

08000944 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	3801      	subs	r0, #1
 8000946:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800094a:	d20f      	bcs.n	800096c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000958:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	4c05      	ldr	r4, [pc, #20]	; (8000970 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000962:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000966:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000968:	6119      	str	r1, [r3, #16]
 800096a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800096c:	2001      	movs	r0, #1
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000978:	680e      	ldr	r6, [r1, #0]
{
 800097a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097c:	2e00      	cmp	r6, #0
 800097e:	f000 80be 	beq.w	8000afe <HAL_GPIO_Init+0x18a>
 8000982:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000984:	4f85      	ldr	r7, [pc, #532]	; (8000b9c <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 8000986:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000988:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800098a:	4d85      	ldr	r5, [pc, #532]	; (8000ba0 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 800098c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8000ba4 <HAL_GPIO_Init+0x230>
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000992:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000994:	fa36 f403 	lsrs.w	r4, r6, r3
 8000998:	f102 0204 	add.w	r2, r2, #4
 800099c:	f000 80af 	beq.w	8000afe <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 80009a0:	2401      	movs	r4, #1
 80009a2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80009a4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80009ac:	d1f1      	bne.n	8000992 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80009ae:	684e      	ldr	r6, [r1, #4]
 80009b0:	2e12      	cmp	r6, #18
 80009b2:	f200 80a7 	bhi.w	8000b04 <HAL_GPIO_Init+0x190>
 80009b6:	2e12      	cmp	r6, #18
 80009b8:	d81a      	bhi.n	80009f0 <HAL_GPIO_Init+0x7c>
 80009ba:	e8df f006 	tbb	[pc, r6]
 80009be:	c2b0      	.short	0xc2b0
 80009c0:	1919d7be 	.word	0x1919d7be
 80009c4:	19191919 	.word	0x19191919
 80009c8:	19191919 	.word	0x19191919
 80009cc:	ba191919 	.word	0xba191919
 80009d0:	c5          	.byte	0xc5
 80009d1:	00          	.byte	0x00
 80009d2:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8000ba8 <HAL_GPIO_Init+0x234>
 80009d6:	4576      	cmp	r6, lr
 80009d8:	f000 80a1 	beq.w	8000b1e <HAL_GPIO_Init+0x1aa>
 80009dc:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80009e0:	4576      	cmp	r6, lr
 80009e2:	f000 809c 	beq.w	8000b1e <HAL_GPIO_Init+0x1aa>
 80009e6:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80009ea:	4576      	cmp	r6, lr
 80009ec:	f000 8097 	beq.w	8000b1e <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009f0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80009f4:	bf9c      	itt	ls
 80009f6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009f8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fa:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009fe:	bf84      	itt	hi
 8000a00:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a04:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a08:	f8de 4000 	ldr.w	r4, [lr]
 8000a0c:	fa0a f90b 	lsl.w	r9, sl, fp
 8000a10:	fa06 fb0b 	lsl.w	fp, r6, fp
 8000a14:	ea24 040b 	bic.w	r4, r4, fp
 8000a18:	ea44 0409 	orr.w	r4, r4, r9
 8000a1c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a20:	684c      	ldr	r4, [r1, #4]
 8000a22:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000a26:	f000 8082 	beq.w	8000b2e <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2a:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a2e:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a32:	f04e 0e01 	orr.w	lr, lr, #1
 8000a36:	f8c7 e018 	str.w	lr, [r7, #24]
 8000a3a:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a3e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a42:	f00e 0e01 	and.w	lr, lr, #1
 8000a46:	f8cd e004 	str.w	lr, [sp, #4]
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000a4e:	f023 0e03 	bic.w	lr, r3, #3
 8000a52:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000a56:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000a5a:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a5e:	fa06 f609 	lsl.w	r6, r6, r9
 8000a62:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a66:	f8df b144 	ldr.w	fp, [pc, #324]	; 8000bac <HAL_GPIO_Init+0x238>
 8000a6a:	4558      	cmp	r0, fp
 8000a6c:	d01b      	beq.n	8000aa6 <HAL_GPIO_Init+0x132>
 8000a6e:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8000a72:	4558      	cmp	r0, fp
 8000a74:	d073      	beq.n	8000b5e <HAL_GPIO_Init+0x1ea>
 8000a76:	f8df b138 	ldr.w	fp, [pc, #312]	; 8000bb0 <HAL_GPIO_Init+0x23c>
 8000a7a:	4558      	cmp	r0, fp
 8000a7c:	d068      	beq.n	8000b50 <HAL_GPIO_Init+0x1dc>
 8000a7e:	f8df b134 	ldr.w	fp, [pc, #308]	; 8000bb4 <HAL_GPIO_Init+0x240>
 8000a82:	4558      	cmp	r0, fp
 8000a84:	d07c      	beq.n	8000b80 <HAL_GPIO_Init+0x20c>
 8000a86:	f8df b130 	ldr.w	fp, [pc, #304]	; 8000bb8 <HAL_GPIO_Init+0x244>
 8000a8a:	4558      	cmp	r0, fp
 8000a8c:	d07f      	beq.n	8000b8e <HAL_GPIO_Init+0x21a>
 8000a8e:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8000bbc <HAL_GPIO_Init+0x248>
 8000a92:	4558      	cmp	r0, fp
 8000a94:	bf0c      	ite	eq
 8000a96:	f04f 0b05 	moveq.w	fp, #5
 8000a9a:	f04f 0b06 	movne.w	fp, #6
 8000a9e:	fa0b f909 	lsl.w	r9, fp, r9
 8000aa2:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa6:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aaa:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aac:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ab0:	bf14      	ite	ne
 8000ab2:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab6:	ea26 060c 	biceq.w	r6, r6, ip
 8000aba:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000abc:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abe:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac2:	bf14      	ite	ne
 8000ac4:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac8:	ea26 060c 	biceq.w	r6, r6, ip
 8000acc:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000ace:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000ad4:	bf14      	ite	ne
 8000ad6:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ada:	ea26 060c 	biceq.w	r6, r6, ip
 8000ade:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae4:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae6:	d01f      	beq.n	8000b28 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae8:	ea44 040c 	orr.w	r4, r4, ip
 8000aec:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aee:	680e      	ldr	r6, [r1, #0]
	position++;
 8000af0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	fa36 f403 	lsrs.w	r4, r6, r3
 8000af6:	f102 0204 	add.w	r2, r2, #4
 8000afa:	f47f af51 	bne.w	80009a0 <HAL_GPIO_Init+0x2c>
  }
}
 8000afe:	b003      	add	sp, #12
 8000b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000b04:	4546      	cmp	r6, r8
 8000b06:	d00a      	beq.n	8000b1e <HAL_GPIO_Init+0x1aa>
 8000b08:	f67f af63 	bls.w	80009d2 <HAL_GPIO_Init+0x5e>
 8000b0c:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8000bc0 <HAL_GPIO_Init+0x24c>
 8000b10:	4576      	cmp	r6, lr
 8000b12:	d004      	beq.n	8000b1e <HAL_GPIO_Init+0x1aa>
 8000b14:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000b18:	4576      	cmp	r6, lr
 8000b1a:	f47f af69 	bne.w	80009f0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b1e:	688e      	ldr	r6, [r1, #8]
 8000b20:	bb3e      	cbnz	r6, 8000b72 <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b22:	f04f 0a04 	mov.w	sl, #4
 8000b26:	e763      	b.n	80009f0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b28:	ea24 040c 	bic.w	r4, r4, ip
 8000b2c:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2e:	680e      	ldr	r6, [r1, #0]
 8000b30:	e72f      	b.n	8000992 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b32:	68cc      	ldr	r4, [r1, #12]
 8000b34:	f104 0a04 	add.w	sl, r4, #4
          break;
 8000b38:	e75a      	b.n	80009f0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b3a:	68cc      	ldr	r4, [r1, #12]
 8000b3c:	f104 0a08 	add.w	sl, r4, #8
          break;
 8000b40:	e756      	b.n	80009f0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b42:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000b46:	e753      	b.n	80009f0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b48:	68cc      	ldr	r4, [r1, #12]
 8000b4a:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8000b4e:	e74f      	b.n	80009f0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b50:	f04f 0b02 	mov.w	fp, #2
 8000b54:	fa0b f909 	lsl.w	r9, fp, r9
 8000b58:	ea46 0609 	orr.w	r6, r6, r9
 8000b5c:	e7a3      	b.n	8000aa6 <HAL_GPIO_Init+0x132>
 8000b5e:	f04f 0b01 	mov.w	fp, #1
 8000b62:	fa0b f909 	lsl.w	r9, fp, r9
 8000b66:	ea46 0609 	orr.w	r6, r6, r9
 8000b6a:	e79c      	b.n	8000aa6 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000b6c:	f04f 0a00 	mov.w	sl, #0
 8000b70:	e73e      	b.n	80009f0 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b72:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b74:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000b78:	bf0c      	ite	eq
 8000b7a:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b7c:	6144      	strne	r4, [r0, #20]
 8000b7e:	e737      	b.n	80009f0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b80:	f04f 0b03 	mov.w	fp, #3
 8000b84:	fa0b f909 	lsl.w	r9, fp, r9
 8000b88:	ea46 0609 	orr.w	r6, r6, r9
 8000b8c:	e78b      	b.n	8000aa6 <HAL_GPIO_Init+0x132>
 8000b8e:	f04f 0b04 	mov.w	fp, #4
 8000b92:	fa0b f909 	lsl.w	r9, fp, r9
 8000b96:	ea46 0609 	orr.w	r6, r6, r9
 8000b9a:	e784      	b.n	8000aa6 <HAL_GPIO_Init+0x132>
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	10220000 	.word	0x10220000
 8000ba8:	10120000 	.word	0x10120000
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40011400 	.word	0x40011400
 8000bb8:	40011800 	.word	0x40011800
 8000bbc:	40011c00 	.word	0x40011c00
 8000bc0:	10310000 	.word	0x10310000

08000bc4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bc4:	6883      	ldr	r3, [r0, #8]
 8000bc6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000bc8:	bf14      	ite	ne
 8000bca:	2001      	movne	r0, #1
 8000bcc:	2000      	moveq	r0, #0
 8000bce:	4770      	bx	lr

08000bd0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000bd6:	6951      	ldr	r1, [r2, #20]
 8000bd8:	4201      	tst	r1, r0
 8000bda:	d100      	bne.n	8000bde <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000bdc:	4770      	bx	lr
{
 8000bde:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000be0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000be2:	f7ff fff5 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
}
 8000be6:	bd08      	pop	{r3, pc}
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bec:	2800      	cmp	r0, #0
 8000bee:	f000 81b6 	beq.w	8000f5e <HAL_RCC_OscConfig+0x372>
{
 8000bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	6803      	ldr	r3, [r0, #0]
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	07dd      	lsls	r5, r3, #31
{
 8000bfc:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfe:	d535      	bpl.n	8000c6c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c00:	499a      	ldr	r1, [pc, #616]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000c02:	684a      	ldr	r2, [r1, #4]
 8000c04:	f002 020c 	and.w	r2, r2, #12
 8000c08:	2a04      	cmp	r2, #4
 8000c0a:	f000 80ef 	beq.w	8000dec <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c0e:	684a      	ldr	r2, [r1, #4]
 8000c10:	f002 020c 	and.w	r2, r2, #12
 8000c14:	2a08      	cmp	r2, #8
 8000c16:	f000 80e5 	beq.w	8000de4 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1a:	6863      	ldr	r3, [r4, #4]
 8000c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c20:	d010      	beq.n	8000c44 <HAL_RCC_OscConfig+0x58>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 810c 	beq.w	8000e40 <HAL_RCC_OscConfig+0x254>
 8000c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c2c:	f000 8182 	beq.w	8000f34 <HAL_RCC_OscConfig+0x348>
 8000c30:	4b8e      	ldr	r3, [pc, #568]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e004      	b.n	8000c4e <HAL_RCC_OscConfig+0x62>
 8000c44:	4a89      	ldr	r2, [pc, #548]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000c46:	6813      	ldr	r3, [r2, #0]
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fe03 	bl	8000858 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c52:	4e86      	ldr	r6, [pc, #536]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000c54:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c56:	e005      	b.n	8000c64 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff fdfe 	bl	8000858 <HAL_GetTick>
 8000c5c:	1b40      	subs	r0, r0, r5
 8000c5e:	2864      	cmp	r0, #100	; 0x64
 8000c60:	f200 80ea 	bhi.w	8000e38 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c64:	6833      	ldr	r3, [r6, #0]
 8000c66:	039a      	lsls	r2, r3, #14
 8000c68:	d5f6      	bpl.n	8000c58 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	079f      	lsls	r7, r3, #30
 8000c6e:	d528      	bpl.n	8000cc2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c70:	4a7e      	ldr	r2, [pc, #504]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000c72:	6851      	ldr	r1, [r2, #4]
 8000c74:	f011 0f0c 	tst.w	r1, #12
 8000c78:	f000 808d 	beq.w	8000d96 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c7c:	6851      	ldr	r1, [r2, #4]
 8000c7e:	f001 010c 	and.w	r1, r1, #12
 8000c82:	2908      	cmp	r1, #8
 8000c84:	f000 8083 	beq.w	8000d8e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c88:	6923      	ldr	r3, [r4, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8118 	beq.w	8000ec0 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c90:	2201      	movs	r2, #1
 8000c92:	4b77      	ldr	r3, [pc, #476]	; (8000e70 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c94:	4e75      	ldr	r6, [pc, #468]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8000c96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c98:	f7ff fdde 	bl	8000858 <HAL_GetTick>
 8000c9c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9e:	e005      	b.n	8000cac <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca0:	f7ff fdda 	bl	8000858 <HAL_GetTick>
 8000ca4:	1b40      	subs	r0, r0, r5
 8000ca6:	2802      	cmp	r0, #2
 8000ca8:	f200 80c6 	bhi.w	8000e38 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cac:	6833      	ldr	r3, [r6, #0]
 8000cae:	0798      	lsls	r0, r3, #30
 8000cb0:	d5f6      	bpl.n	8000ca0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb2:	6833      	ldr	r3, [r6, #0]
 8000cb4:	6962      	ldr	r2, [r4, #20]
 8000cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cbe:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	071a      	lsls	r2, r3, #28
 8000cc4:	d41f      	bmi.n	8000d06 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cc6:	075d      	lsls	r5, r3, #29
 8000cc8:	d542      	bpl.n	8000d50 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cca:	4b68      	ldr	r3, [pc, #416]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000ccc:	69da      	ldr	r2, [r3, #28]
 8000cce:	00d0      	lsls	r0, r2, #3
 8000cd0:	d57d      	bpl.n	8000dce <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8000cd2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd4:	4e67      	ldr	r6, [pc, #412]	; (8000e74 <HAL_RCC_OscConfig+0x288>)
 8000cd6:	6833      	ldr	r3, [r6, #0]
 8000cd8:	05d9      	lsls	r1, r3, #23
 8000cda:	f140 809d 	bpl.w	8000e18 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cde:	68e3      	ldr	r3, [r4, #12]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	f000 80fe 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x2f6>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 80ca 	beq.w	8000e80 <HAL_RCC_OscConfig+0x294>
 8000cec:	2b05      	cmp	r3, #5
 8000cee:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000cf0:	6a1a      	ldr	r2, [r3, #32]
 8000cf2:	f000 812c 	beq.w	8000f4e <HAL_RCC_OscConfig+0x362>
 8000cf6:	f022 0201 	bic.w	r2, r2, #1
 8000cfa:	621a      	str	r2, [r3, #32]
 8000cfc:	6a1a      	ldr	r2, [r3, #32]
 8000cfe:	f022 0204 	bic.w	r2, r2, #4
 8000d02:	621a      	str	r2, [r3, #32]
 8000d04:	e0f2      	b.n	8000eec <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d06:	69a3      	ldr	r3, [r4, #24]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d04f      	beq.n	8000dac <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d10:	4e56      	ldr	r6, [pc, #344]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8000d12:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000d16:	f7ff fd9f 	bl	8000858 <HAL_GetTick>
 8000d1a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1c:	e005      	b.n	8000d2a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fd9b 	bl	8000858 <HAL_GetTick>
 8000d22:	1b40      	subs	r0, r0, r5
 8000d24:	2802      	cmp	r0, #2
 8000d26:	f200 8087 	bhi.w	8000e38 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d2c:	079b      	lsls	r3, r3, #30
 8000d2e:	d5f6      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d30:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <HAL_RCC_OscConfig+0x28c>)
 8000d32:	4a52      	ldr	r2, [pc, #328]	; (8000e7c <HAL_RCC_OscConfig+0x290>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	0a5b      	lsrs	r3, r3, #9
 8000d3c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000d3e:	bf00      	nop
  }
  while (Delay --);
 8000d40:	9b01      	ldr	r3, [sp, #4]
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	9201      	str	r2, [sp, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f9      	bne.n	8000d3e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	075d      	lsls	r5, r3, #29
 8000d4e:	d4bc      	bmi.n	8000cca <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d50:	69e0      	ldr	r0, [r4, #28]
 8000d52:	b1c0      	cbz	r0, 8000d86 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d54:	4d45      	ldr	r5, [pc, #276]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000d56:	686b      	ldr	r3, [r5, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	f000 80d8 	beq.w	8000f12 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8000d62:	2200      	movs	r2, #0
 8000d64:	4b42      	ldr	r3, [pc, #264]	; (8000e70 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d66:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d68:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d6a:	f000 80fa 	beq.w	8000f62 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fd73 	bl	8000858 <HAL_GetTick>
 8000d72:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d74:	e004      	b.n	8000d80 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d76:	f7ff fd6f 	bl	8000858 <HAL_GetTick>
 8000d7a:	1b00      	subs	r0, r0, r4
 8000d7c:	2802      	cmp	r0, #2
 8000d7e:	d85b      	bhi.n	8000e38 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d80:	682b      	ldr	r3, [r5, #0]
 8000d82:	019b      	lsls	r3, r3, #6
 8000d84:	d4f7      	bmi.n	8000d76 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8000d86:	2000      	movs	r0, #0
}
 8000d88:	b002      	add	sp, #8
 8000d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d8e:	6852      	ldr	r2, [r2, #4]
 8000d90:	03d6      	lsls	r6, r2, #15
 8000d92:	f53f af79 	bmi.w	8000c88 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	0795      	lsls	r5, r2, #30
 8000d9c:	d530      	bpl.n	8000e00 <HAL_RCC_OscConfig+0x214>
 8000d9e:	6922      	ldr	r2, [r4, #16]
 8000da0:	2a01      	cmp	r2, #1
 8000da2:	d02d      	beq.n	8000e00 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
}
 8000da6:	b002      	add	sp, #8
 8000da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000dac:	4a30      	ldr	r2, [pc, #192]	; (8000e70 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dae:	4e2f      	ldr	r6, [pc, #188]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8000db0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000db4:	f7ff fd50 	bl	8000858 <HAL_GetTick>
 8000db8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dba:	e004      	b.n	8000dc6 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fd4c 	bl	8000858 <HAL_GetTick>
 8000dc0:	1b40      	subs	r0, r0, r5
 8000dc2:	2802      	cmp	r0, #2
 8000dc4:	d838      	bhi.n	8000e38 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000dc8:	079f      	lsls	r7, r3, #30
 8000dca:	d4f7      	bmi.n	8000dbc <HAL_RCC_OscConfig+0x1d0>
 8000dcc:	e7bd      	b.n	8000d4a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000dd0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dd6:	61da      	str	r2, [r3, #28]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000de2:	e777      	b.n	8000cd4 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de4:	684a      	ldr	r2, [r1, #4]
 8000de6:	03d0      	lsls	r0, r2, #15
 8000de8:	f57f af17 	bpl.w	8000c1a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	0391      	lsls	r1, r2, #14
 8000df2:	f57f af3b 	bpl.w	8000c6c <HAL_RCC_OscConfig+0x80>
 8000df6:	6862      	ldr	r2, [r4, #4]
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f47f af37 	bne.w	8000c6c <HAL_RCC_OscConfig+0x80>
 8000dfe:	e7d1      	b.n	8000da4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e00:	491a      	ldr	r1, [pc, #104]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000e02:	6960      	ldr	r0, [r4, #20]
 8000e04:	680a      	ldr	r2, [r1, #0]
 8000e06:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e0a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000e0e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e10:	071a      	lsls	r2, r3, #28
 8000e12:	f57f af58 	bpl.w	8000cc6 <HAL_RCC_OscConfig+0xda>
 8000e16:	e776      	b.n	8000d06 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e18:	6833      	ldr	r3, [r6, #0]
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e20:	f7ff fd1a 	bl	8000858 <HAL_GetTick>
 8000e24:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e26:	6833      	ldr	r3, [r6, #0]
 8000e28:	05da      	lsls	r2, r3, #23
 8000e2a:	f53f af58 	bmi.w	8000cde <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2e:	f7ff fd13 	bl	8000858 <HAL_GetTick>
 8000e32:	1bc0      	subs	r0, r0, r7
 8000e34:	2864      	cmp	r0, #100	; 0x64
 8000e36:	d9f6      	bls.n	8000e26 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8000e38:	2003      	movs	r0, #3
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e40:	4d0a      	ldr	r5, [pc, #40]	; (8000e6c <HAL_RCC_OscConfig+0x280>)
 8000e42:	682b      	ldr	r3, [r5, #0]
 8000e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e48:	602b      	str	r3, [r5, #0]
 8000e4a:	682b      	ldr	r3, [r5, #0]
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e52:	f7ff fd01 	bl	8000858 <HAL_GetTick>
 8000e56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e58:	e004      	b.n	8000e64 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5a:	f7ff fcfd 	bl	8000858 <HAL_GetTick>
 8000e5e:	1b80      	subs	r0, r0, r6
 8000e60:	2864      	cmp	r0, #100	; 0x64
 8000e62:	d8e9      	bhi.n	8000e38 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	039b      	lsls	r3, r3, #14
 8000e68:	d4f7      	bmi.n	8000e5a <HAL_RCC_OscConfig+0x26e>
 8000e6a:	e6fe      	b.n	8000c6a <HAL_RCC_OscConfig+0x7e>
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	42420000 	.word	0x42420000
 8000e74:	40007000 	.word	0x40007000
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e80:	4e50      	ldr	r6, [pc, #320]	; (8000fc4 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e86:	6a33      	ldr	r3, [r6, #32]
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6233      	str	r3, [r6, #32]
 8000e8e:	6a33      	ldr	r3, [r6, #32]
 8000e90:	f023 0304 	bic.w	r3, r3, #4
 8000e94:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000e96:	f7ff fcdf 	bl	8000858 <HAL_GetTick>
 8000e9a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e9c:	e004      	b.n	8000ea8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fcdb 	bl	8000858 <HAL_GetTick>
 8000ea2:	1bc0      	subs	r0, r0, r7
 8000ea4:	4540      	cmp	r0, r8
 8000ea6:	d8c7      	bhi.n	8000e38 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea8:	6a33      	ldr	r3, [r6, #32]
 8000eaa:	0798      	lsls	r0, r3, #30
 8000eac:	d4f7      	bmi.n	8000e9e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	f43f af4e 	beq.w	8000d50 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb4:	4a43      	ldr	r2, [pc, #268]	; (8000fc4 <HAL_RCC_OscConfig+0x3d8>)
 8000eb6:	69d3      	ldr	r3, [r2, #28]
 8000eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	e747      	b.n	8000d50 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000ec0:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	4e40      	ldr	r6, [pc, #256]	; (8000fc4 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8000ec4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fcc7 	bl	8000858 <HAL_GetTick>
 8000eca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ecc:	e004      	b.n	8000ed8 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ece:	f7ff fcc3 	bl	8000858 <HAL_GetTick>
 8000ed2:	1b40      	subs	r0, r0, r5
 8000ed4:	2802      	cmp	r0, #2
 8000ed6:	d8af      	bhi.n	8000e38 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed8:	6833      	ldr	r3, [r6, #0]
 8000eda:	0799      	lsls	r1, r3, #30
 8000edc:	d4f7      	bmi.n	8000ece <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	e6ef      	b.n	8000cc2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee2:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <HAL_RCC_OscConfig+0x3d8>)
 8000ee4:	6a13      	ldr	r3, [r2, #32]
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000eec:	f7ff fcb4 	bl	8000858 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ef4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef6:	4f33      	ldr	r7, [pc, #204]	; (8000fc4 <HAL_RCC_OscConfig+0x3d8>)
 8000ef8:	e004      	b.n	8000f04 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efa:	f7ff fcad 	bl	8000858 <HAL_GetTick>
 8000efe:	1b80      	subs	r0, r0, r6
 8000f00:	4540      	cmp	r0, r8
 8000f02:	d899      	bhi.n	8000e38 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	079b      	lsls	r3, r3, #30
 8000f08:	d5f7      	bpl.n	8000efa <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	f43f af20 	beq.w	8000d50 <HAL_RCC_OscConfig+0x164>
 8000f10:	e7d0      	b.n	8000eb4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f12:	2801      	cmp	r0, #1
 8000f14:	f43f af38 	beq.w	8000d88 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8000f18:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f1a:	6a22      	ldr	r2, [r4, #32]
 8000f1c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000f20:	4291      	cmp	r1, r2
 8000f22:	f47f af3f 	bne.w	8000da4 <HAL_RCC_OscConfig+0x1b8>
 8000f26:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8000f2c:	1a18      	subs	r0, r3, r0
 8000f2e:	bf18      	it	ne
 8000f30:	2001      	movne	r0, #1
 8000f32:	e729      	b.n	8000d88 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f38:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e67f      	b.n	8000c4e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4e:	f042 0204 	orr.w	r2, r2, #4
 8000f52:	621a      	str	r2, [r3, #32]
 8000f54:	6a1a      	ldr	r2, [r3, #32]
 8000f56:	f042 0201 	orr.w	r2, r2, #1
 8000f5a:	621a      	str	r2, [r3, #32]
 8000f5c:	e7c6      	b.n	8000eec <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
}
 8000f60:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8000f62:	f7ff fc79 	bl	8000858 <HAL_GetTick>
 8000f66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f68:	e005      	b.n	8000f76 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fc75 	bl	8000858 <HAL_GetTick>
 8000f6e:	1b80      	subs	r0, r0, r6
 8000f70:	2802      	cmp	r0, #2
 8000f72:	f63f af61 	bhi.w	8000e38 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f76:	682b      	ldr	r3, [r5, #0]
 8000f78:	0199      	lsls	r1, r3, #6
 8000f7a:	d4f6      	bmi.n	8000f6a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f7c:	6a23      	ldr	r3, [r4, #32]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d105      	bne.n	8000f90 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f84:	686a      	ldr	r2, [r5, #4]
 8000f86:	68a1      	ldr	r1, [r4, #8]
 8000f88:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f90:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f92:	4d0c      	ldr	r5, [pc, #48]	; (8000fc4 <HAL_RCC_OscConfig+0x3d8>)
 8000f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f96:	686a      	ldr	r2, [r5, #4]
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000f9e:	490a      	ldr	r1, [pc, #40]	; (8000fc8 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fa4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc57 	bl	8000858 <HAL_GetTick>
 8000faa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fac:	e005      	b.n	8000fba <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fc53 	bl	8000858 <HAL_GetTick>
 8000fb2:	1b00      	subs	r0, r0, r4
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	f63f af3f 	bhi.w	8000e38 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	019a      	lsls	r2, r3, #6
 8000fbe:	d5f6      	bpl.n	8000fae <HAL_RCC_OscConfig+0x3c2>
 8000fc0:	e6e1      	b.n	8000d86 <HAL_RCC_OscConfig+0x19a>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	42420000 	.word	0x42420000

08000fcc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	f000 80a1 	beq.w	8001114 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd2:	4a56      	ldr	r2, [pc, #344]	; (800112c <HAL_RCC_ClockConfig+0x160>)
{
 8000fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd8:	6813      	ldr	r3, [r2, #0]
 8000fda:	4604      	mov	r4, r0
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	460d      	mov	r5, r1
 8000fe4:	d20c      	bcs.n	8001000 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	6813      	ldr	r3, [r2, #0]
 8000fe8:	f023 0307 	bic.w	r3, r3, #7
 8000fec:	430b      	orrs	r3, r1
 8000fee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff0:	6813      	ldr	r3, [r2, #0]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d002      	beq.n	8001000 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
}
 8000ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	079e      	lsls	r6, r3, #30
 8001004:	d514      	bpl.n	8001030 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001006:	0758      	lsls	r0, r3, #29
 8001008:	d504      	bpl.n	8001014 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800100a:	4949      	ldr	r1, [pc, #292]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
 800100c:	684a      	ldr	r2, [r1, #4]
 800100e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001012:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001014:	0719      	lsls	r1, r3, #28
 8001016:	d504      	bpl.n	8001022 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001018:	4945      	ldr	r1, [pc, #276]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
 800101a:	684a      	ldr	r2, [r1, #4]
 800101c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001020:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001022:	4943      	ldr	r1, [pc, #268]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
 8001024:	68a0      	ldr	r0, [r4, #8]
 8001026:	684a      	ldr	r2, [r1, #4]
 8001028:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800102c:	4302      	orrs	r2, r0
 800102e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001030:	07da      	lsls	r2, r3, #31
 8001032:	d520      	bpl.n	8001076 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001034:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001038:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103c:	d06c      	beq.n	8001118 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800103e:	2a02      	cmp	r2, #2
 8001040:	d065      	beq.n	800110e <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001042:	079e      	lsls	r6, r3, #30
 8001044:	d5d9      	bpl.n	8000ffa <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001046:	4e3a      	ldr	r6, [pc, #232]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001048:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800104c:	6873      	ldr	r3, [r6, #4]
 800104e:	f023 0303 	bic.w	r3, r3, #3
 8001052:	4313      	orrs	r3, r2
 8001054:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001056:	f7ff fbff 	bl	8000858 <HAL_GetTick>
 800105a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800105c:	e004      	b.n	8001068 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105e:	f7ff fbfb 	bl	8000858 <HAL_GetTick>
 8001062:	1bc0      	subs	r0, r0, r7
 8001064:	4540      	cmp	r0, r8
 8001066:	d85a      	bhi.n	800111e <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001068:	6873      	ldr	r3, [r6, #4]
 800106a:	6862      	ldr	r2, [r4, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001074:	d1f3      	bne.n	800105e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <HAL_RCC_ClockConfig+0x160>)
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	42ab      	cmp	r3, r5
 8001080:	d909      	bls.n	8001096 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f023 0307 	bic.w	r3, r3, #7
 8001088:	432b      	orrs	r3, r5
 800108a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	42ab      	cmp	r3, r5
 8001094:	d1b1      	bne.n	8000ffa <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	0758      	lsls	r0, r3, #29
 800109a:	d506      	bpl.n	80010aa <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800109c:	4924      	ldr	r1, [pc, #144]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
 800109e:	68e0      	ldr	r0, [r4, #12]
 80010a0:	684a      	ldr	r2, [r1, #4]
 80010a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010a6:	4302      	orrs	r2, r0
 80010a8:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010aa:	0719      	lsls	r1, r3, #28
 80010ac:	d507      	bpl.n	80010be <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
 80010b0:	6921      	ldr	r1, [r4, #16]
 80010b2:	6853      	ldr	r3, [r2, #4]
 80010b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010bc:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 80010be:	491c      	ldr	r1, [pc, #112]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
 80010c0:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80010c2:	f002 030c 	and.w	r3, r2, #12
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d010      	beq.n	80010ec <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010cc:	4a18      	ldr	r2, [pc, #96]	; (8001130 <HAL_RCC_ClockConfig+0x164>)
 80010ce:	481a      	ldr	r0, [pc, #104]	; (8001138 <HAL_RCC_ClockConfig+0x16c>)
 80010d0:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80010d2:	491a      	ldr	r1, [pc, #104]	; (800113c <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010d4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80010d8:	5c80      	ldrb	r0, [r0, r2]
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <HAL_RCC_ClockConfig+0x174>)
 80010dc:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80010de:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010e0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80010e2:	f7ff fb77 	bl	80007d4 <HAL_InitTick>
  return HAL_OK;
 80010e6:	2000      	movs	r0, #0
}
 80010e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010ec:	4815      	ldr	r0, [pc, #84]	; (8001144 <HAL_RCC_ClockConfig+0x178>)
 80010ee:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010f2:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010f4:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010f6:	d514      	bpl.n	8001122 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010fa:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010fc:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001100:	4911      	ldr	r1, [pc, #68]	; (8001148 <HAL_RCC_ClockConfig+0x17c>)
 8001102:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001106:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001108:	fbb3 f3f2 	udiv	r3, r3, r2
 800110c:	e7de      	b.n	80010cc <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	019f      	lsls	r7, r3, #6
 8001110:	d499      	bmi.n	8001046 <HAL_RCC_ClockConfig+0x7a>
 8001112:	e772      	b.n	8000ffa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
}
 8001116:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001118:	039b      	lsls	r3, r3, #14
 800111a:	d494      	bmi.n	8001046 <HAL_RCC_ClockConfig+0x7a>
 800111c:	e76d      	b.n	8000ffa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e76c      	b.n	8000ffc <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_RCC_ClockConfig+0x180>)
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	e7d0      	b.n	80010cc <HAL_RCC_ClockConfig+0x100>
 800112a:	bf00      	nop
 800112c:	40022000 	.word	0x40022000
 8001130:	40021000 	.word	0x40021000
 8001134:	007a1200 	.word	0x007a1200
 8001138:	08001a68 	.word	0x08001a68
 800113c:	20000008 	.word	0x20000008
 8001140:	20000000 	.word	0x20000000
 8001144:	08001a78 	.word	0x08001a78
 8001148:	08001a88 	.word	0x08001a88
 800114c:	003d0900 	.word	0x003d0900

08001150 <HAL_RCC_MCOConfig>:
{
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpio = {0U};
 8001152:	2200      	movs	r2, #0
  gpio.Pin       = MCO1_PIN;
 8001154:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001158:	2702      	movs	r7, #2
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800115a:	2303      	movs	r3, #3
{
 800115c:	b087      	sub	sp, #28
  gpio.Pin       = MCO1_PIN;
 800115e:	e9cd 6702 	strd	r6, r7, [sp, #8]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001162:	e9cd 2304 	strd	r2, r3, [sp, #16]
  MCO1_CLK_ENABLE();
 8001166:	4c0b      	ldr	r4, [pc, #44]	; (8001194 <HAL_RCC_MCOConfig+0x44>)
{
 8001168:	460d      	mov	r5, r1
  MCO1_CLK_ENABLE();
 800116a:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <HAL_RCC_MCOConfig+0x48>)
  MCO1_CLK_ENABLE();
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	61a3      	str	r3, [r4, #24]
 8001174:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001176:	a902      	add	r1, sp, #8
  MCO1_CLK_ENABLE();
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001180:	f7ff fbf8 	bl	8000974 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001184:	6863      	ldr	r3, [r4, #4]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	432b      	orrs	r3, r5
 800118c:	6063      	str	r3, [r4, #4]
}
 800118e:	b007      	add	sp, #28
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40010800 	.word	0x40010800

0800119c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800119c:	2800      	cmp	r0, #0
 800119e:	d076      	beq.n	800128e <HAL_TIM_Base_Init+0xf2>
{
 80011a0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80011a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011a6:	4604      	mov	r4, r0
 80011a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d069      	beq.n	8001284 <HAL_TIM_Base_Init+0xe8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011b0:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011b2:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011b4:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80011b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011ba:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80011bc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011be:	d01c      	beq.n	80011fa <HAL_TIM_Base_Init+0x5e>
 80011c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80011c4:	428a      	cmp	r2, r1
 80011c6:	d018      	beq.n	80011fa <HAL_TIM_Base_Init+0x5e>
 80011c8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80011cc:	d048      	beq.n	8001260 <HAL_TIM_Base_Init+0xc4>
 80011ce:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80011d2:	428a      	cmp	r2, r1
 80011d4:	d044      	beq.n	8001260 <HAL_TIM_Base_Init+0xc4>
 80011d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80011da:	428a      	cmp	r2, r1
 80011dc:	d040      	beq.n	8001260 <HAL_TIM_Base_Init+0xc4>
 80011de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80011e2:	428a      	cmp	r2, r1
 80011e4:	d03c      	beq.n	8001260 <HAL_TIM_Base_Init+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011e6:	69a0      	ldr	r0, [r4, #24]
 80011e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ec:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011ee:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80011f0:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011f2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011f4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80011f6:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011f8:	e012      	b.n	8001220 <HAL_TIM_Base_Init+0x84>
    tmpcr1 |= Structure->CounterMode;
 80011fa:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001200:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8001202:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8001204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001208:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800120a:	69a1      	ldr	r1, [r4, #24]
 800120c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001210:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001212:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001214:	68e3      	ldr	r3, [r4, #12]
 8001216:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001218:	6863      	ldr	r3, [r4, #4]
 800121a:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800121c:	6963      	ldr	r3, [r4, #20]
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001220:	2301      	movs	r3, #1
 8001222:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001224:	6913      	ldr	r3, [r2, #16]
 8001226:	07db      	lsls	r3, r3, #31
 8001228:	d503      	bpl.n	8001232 <HAL_TIM_Base_Init+0x96>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800122a:	6913      	ldr	r3, [r2, #16]
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001232:	2301      	movs	r3, #1
 8001234:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001238:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800123c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001240:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001244:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800124c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001250:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001254:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001258:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
}
 800125e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8001260:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001266:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8001268:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800126a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800126e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001270:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001276:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001278:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800127a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800127c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800127e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001280:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001282:	e7cd      	b.n	8001220 <HAL_TIM_Base_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 8001284:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001288:	f7ff f9a2 	bl	80005d0 <HAL_TIM_Base_MspInit>
 800128c:	e790      	b.n	80011b0 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40012c00 	.word	0x40012c00

08001298 <HAL_TIM_PWM_MspInit>:
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800129c:	2800      	cmp	r0, #0
 800129e:	d076      	beq.n	800138e <HAL_TIM_PWM_Init+0xf2>
{
 80012a0:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80012a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80012a6:	4604      	mov	r4, r0
 80012a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d069      	beq.n	8001384 <HAL_TIM_PWM_Init+0xe8>
  htim->State = HAL_TIM_STATE_BUSY;
 80012b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012b2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012b4:	4937      	ldr	r1, [pc, #220]	; (8001394 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80012b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012ba:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80012bc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012be:	d01c      	beq.n	80012fa <HAL_TIM_PWM_Init+0x5e>
 80012c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012c4:	428a      	cmp	r2, r1
 80012c6:	d018      	beq.n	80012fa <HAL_TIM_PWM_Init+0x5e>
 80012c8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80012cc:	d048      	beq.n	8001360 <HAL_TIM_PWM_Init+0xc4>
 80012ce:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d044      	beq.n	8001360 <HAL_TIM_PWM_Init+0xc4>
 80012d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80012da:	428a      	cmp	r2, r1
 80012dc:	d040      	beq.n	8001360 <HAL_TIM_PWM_Init+0xc4>
 80012de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80012e2:	428a      	cmp	r2, r1
 80012e4:	d03c      	beq.n	8001360 <HAL_TIM_PWM_Init+0xc4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012e6:	69a0      	ldr	r0, [r4, #24]
 80012e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012ec:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012ee:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 80012f0:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80012f2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012f4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80012f6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012f8:	e012      	b.n	8001320 <HAL_TIM_PWM_Init+0x84>
    tmpcr1 |= Structure->CounterMode;
 80012fa:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001300:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8001302:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8001304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001308:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800130a:	69a1      	ldr	r1, [r4, #24]
 800130c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001310:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001312:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001314:	68e3      	ldr	r3, [r4, #12]
 8001316:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800131c:	6963      	ldr	r3, [r4, #20]
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001320:	2301      	movs	r3, #1
 8001322:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001324:	6913      	ldr	r3, [r2, #16]
 8001326:	07db      	lsls	r3, r3, #31
 8001328:	d503      	bpl.n	8001332 <HAL_TIM_PWM_Init+0x96>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800132a:	6913      	ldr	r3, [r2, #16]
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001332:	2301      	movs	r3, #1
 8001334:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001338:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800133c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001340:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001344:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800134c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001350:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001358:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800135c:	2000      	movs	r0, #0
}
 800135e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8001360:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001366:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8001368:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800136a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800136e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001370:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001376:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001378:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800137a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800137c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800137e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001380:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001382:	e7cd      	b.n	8001320 <HAL_TIM_PWM_Init+0x84>
    htim->Lock = HAL_UNLOCKED;
 8001384:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001388:	f7ff ff86 	bl	8001298 <HAL_TIM_PWM_MspInit>
 800138c:	e790      	b.n	80012b0 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 800138e:	2001      	movs	r0, #1
}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40012c00 	.word	0x40012c00

08001398 <HAL_TIM_PWM_Start>:
 8001398:	2900      	cmp	r1, #0
 800139a:	d135      	bne.n	8001408 <HAL_TIM_PWM_Start+0x70>
 800139c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d145      	bne.n	8001430 <HAL_TIM_PWM_Start+0x98>
 80013a4:	2302      	movs	r3, #2
 80013a6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80013aa:	2201      	movs	r2, #1
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	f001 011f 	and.w	r1, r1, #31
 80013b2:	6a18      	ldr	r0, [r3, #32]
 80013b4:	fa02 f101 	lsl.w	r1, r2, r1
 80013b8:	ea20 0001 	bic.w	r0, r0, r1
 80013bc:	b410      	push	{r4}
 80013be:	6218      	str	r0, [r3, #32]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	4c28      	ldr	r4, [pc, #160]	; (8001464 <HAL_TIM_PWM_Start+0xcc>)
 80013c4:	4311      	orrs	r1, r2
 80013c6:	42a3      	cmp	r3, r4
 80013c8:	6219      	str	r1, [r3, #32]
 80013ca:	d033      	beq.n	8001434 <HAL_TIM_PWM_Start+0x9c>
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <HAL_TIM_PWM_Start+0xd0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d030      	beq.n	8001434 <HAL_TIM_PWM_Start+0x9c>
 80013d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d6:	d00b      	beq.n	80013f0 <HAL_TIM_PWM_Start+0x58>
 80013d8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_TIM_PWM_Start+0x58>
 80013e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d003      	beq.n	80013f0 <HAL_TIM_PWM_Start+0x58>
 80013e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d104      	bne.n	80013fa <HAL_TIM_PWM_Start+0x62>
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	f002 0207 	and.w	r2, r2, #7
 80013f6:	2a06      	cmp	r2, #6
 80013f8:	d025      	beq.n	8001446 <HAL_TIM_PWM_Start+0xae>
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2000      	movs	r0, #0
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	bc10      	pop	{r4}
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	4770      	bx	lr
 8001408:	2904      	cmp	r1, #4
 800140a:	d01f      	beq.n	800144c <HAL_TIM_PWM_Start+0xb4>
 800140c:	2908      	cmp	r1, #8
 800140e:	d00b      	beq.n	8001428 <HAL_TIM_PWM_Start+0x90>
 8001410:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10b      	bne.n	8001430 <HAL_TIM_PWM_Start+0x98>
 8001418:	2904      	cmp	r1, #4
 800141a:	d01b      	beq.n	8001454 <HAL_TIM_PWM_Start+0xbc>
 800141c:	2908      	cmp	r1, #8
 800141e:	d01d      	beq.n	800145c <HAL_TIM_PWM_Start+0xc4>
 8001420:	2302      	movs	r3, #2
 8001422:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8001426:	e7c0      	b.n	80013aa <HAL_TIM_PWM_Start+0x12>
 8001428:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800142c:	2b01      	cmp	r3, #1
 800142e:	d015      	beq.n	800145c <HAL_TIM_PWM_Start+0xc4>
 8001430:	2001      	movs	r0, #1
 8001432:	4770      	bx	lr
 8001434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	f002 0207 	and.w	r2, r2, #7
 8001442:	2a06      	cmp	r2, #6
 8001444:	d1d9      	bne.n	80013fa <HAL_TIM_PWM_Start+0x62>
 8001446:	2000      	movs	r0, #0
 8001448:	bc10      	pop	{r4}
 800144a:	4770      	bx	lr
 800144c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001450:	2b01      	cmp	r3, #1
 8001452:	d1ed      	bne.n	8001430 <HAL_TIM_PWM_Start+0x98>
 8001454:	2302      	movs	r3, #2
 8001456:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800145a:	e7a6      	b.n	80013aa <HAL_TIM_PWM_Start+0x12>
 800145c:	2302      	movs	r3, #2
 800145e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001462:	e7a2      	b.n	80013aa <HAL_TIM_PWM_Start+0x12>
 8001464:	40012c00 	.word	0x40012c00
 8001468:	40013400 	.word	0x40013400

0800146c <HAL_TIM_PWM_Stop>:
 800146c:	2201      	movs	r2, #1
 800146e:	6803      	ldr	r3, [r0, #0]
 8001470:	f001 0c1f 	and.w	ip, r1, #31
 8001474:	fa02 fc0c 	lsl.w	ip, r2, ip
 8001478:	6a1a      	ldr	r2, [r3, #32]
 800147a:	b410      	push	{r4}
 800147c:	ea22 020c 	bic.w	r2, r2, ip
 8001480:	621a      	str	r2, [r3, #32]
 8001482:	4c1e      	ldr	r4, [pc, #120]	; (80014fc <HAL_TIM_PWM_Stop+0x90>)
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	42a3      	cmp	r3, r4
 8001488:	621a      	str	r2, [r3, #32]
 800148a:	d013      	beq.n	80014b4 <HAL_TIM_PWM_Stop+0x48>
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_TIM_PWM_Stop+0x94>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d010      	beq.n	80014b4 <HAL_TIM_PWM_Stop+0x48>
 8001492:	f241 1211 	movw	r2, #4369	; 0x1111
 8001496:	6a1c      	ldr	r4, [r3, #32]
 8001498:	4214      	tst	r4, r2
 800149a:	d104      	bne.n	80014a6 <HAL_TIM_PWM_Stop+0x3a>
 800149c:	f240 4244 	movw	r2, #1092	; 0x444
 80014a0:	6a1c      	ldr	r4, [r3, #32]
 80014a2:	4214      	tst	r4, r2
 80014a4:	d020      	beq.n	80014e8 <HAL_TIM_PWM_Stop+0x7c>
 80014a6:	2301      	movs	r3, #1
 80014a8:	b999      	cbnz	r1, 80014d2 <HAL_TIM_PWM_Stop+0x66>
 80014aa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80014ae:	bc10      	pop	{r4}
 80014b0:	2000      	movs	r0, #0
 80014b2:	4770      	bx	lr
 80014b4:	f241 1211 	movw	r2, #4369	; 0x1111
 80014b8:	6a1c      	ldr	r4, [r3, #32]
 80014ba:	4214      	tst	r4, r2
 80014bc:	d1e9      	bne.n	8001492 <HAL_TIM_PWM_Stop+0x26>
 80014be:	f240 4244 	movw	r2, #1092	; 0x444
 80014c2:	6a1c      	ldr	r4, [r3, #32]
 80014c4:	4214      	tst	r4, r2
 80014c6:	d1e4      	bne.n	8001492 <HAL_TIM_PWM_Stop+0x26>
 80014c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44
 80014d0:	e7df      	b.n	8001492 <HAL_TIM_PWM_Stop+0x26>
 80014d2:	2904      	cmp	r1, #4
 80014d4:	d00d      	beq.n	80014f2 <HAL_TIM_PWM_Stop+0x86>
 80014d6:	2908      	cmp	r1, #8
 80014d8:	bf0c      	ite	eq
 80014da:	f880 3040 	strbeq.w	r3, [r0, #64]	; 0x40
 80014de:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
 80014e2:	bc10      	pop	{r4}
 80014e4:	2000      	movs	r0, #0
 80014e6:	4770      	bx	lr
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e7d9      	b.n	80014a6 <HAL_TIM_PWM_Stop+0x3a>
 80014f2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80014f6:	bc10      	pop	{r4}
 80014f8:	2000      	movs	r0, #0
 80014fa:	4770      	bx	lr
 80014fc:	40012c00 	.word	0x40012c00
 8001500:	40013400 	.word	0x40013400

08001504 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8001504:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001508:	2b01      	cmp	r3, #1
 800150a:	f000 80d2 	beq.w	80016b2 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 800150e:	2301      	movs	r3, #1
{
 8001510:	b530      	push	{r4, r5, lr}
 8001512:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8001514:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001518:	2a0c      	cmp	r2, #12
 800151a:	d808      	bhi.n	800152e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800151c:	e8df f002 	tbb	[pc, r2]
 8001520:	0707073e 	.word	0x0707073e
 8001524:	0707076b 	.word	0x0707076b
 8001528:	0707079b 	.word	0x0707079b
 800152c:	0c          	.byte	0x0c
 800152d:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800152e:	2300      	movs	r3, #0
 8001530:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  switch (Channel)
 8001534:	2001      	movs	r0, #1
}
 8001536:	bd30      	pop	{r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001538:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800153a:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800153c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800153e:	6a18      	ldr	r0, [r3, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001544:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8001548:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800154a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800154c:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800154e:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001552:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001556:	688d      	ldr	r5, [r1, #8]
 8001558:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800155c:	4d70      	ldr	r5, [pc, #448]	; (8001720 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800155e:	42ab      	cmp	r3, r5
 8001560:	f000 80c8 	beq.w	80016f4 <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8001564:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001568:	42ab      	cmp	r3, r5
 800156a:	f000 80c3 	beq.w	80016f4 <HAL_TIM_PWM_ConfigChannel+0x1f0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800156e:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001570:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001572:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001574:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8001576:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001578:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800157a:	69d9      	ldr	r1, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800157e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001582:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001584:	69d9      	ldr	r1, [r3, #28]
 8001586:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800158a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001592:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8001594:	2300      	movs	r3, #0
 8001596:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 800159a:	bd30      	pop	{r4, r5, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800159c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800159e:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80015a0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015a2:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~TIM_CCER_CC1P;
 80015a4:	f022 0202 	bic.w	r2, r2, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015a8:	f020 0001 	bic.w	r0, r0, #1
 80015ac:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80015ae:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80015b0:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80015b2:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80015b6:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80015b8:	688d      	ldr	r5, [r1, #8]
 80015ba:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80015bc:	4d58      	ldr	r5, [pc, #352]	; (8001720 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80015be:	42ab      	cmp	r3, r5
 80015c0:	d079      	beq.n	80016b6 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 80015c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015c6:	42ab      	cmp	r3, r5
 80015c8:	d075      	beq.n	80016b6 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CR2 = tmpcr2;
 80015ca:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015cc:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80015ce:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015d0:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80015d2:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80015d4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015d6:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015da:	f041 0108 	orr.w	r1, r1, #8
 80015de:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015e0:	6999      	ldr	r1, [r3, #24]
 80015e2:	f021 0104 	bic.w	r1, r1, #4
 80015e6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	4322      	orrs	r2, r4
 80015ec:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80015ee:	2300      	movs	r3, #0
 80015f0:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 80015f4:	bd30      	pop	{r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015f6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015f8:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80015fa:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015fc:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 80015fe:	f022 0220 	bic.w	r2, r2, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001602:	f020 0010 	bic.w	r0, r0, #16
 8001606:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001608:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800160a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800160c:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001610:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001614:	688d      	ldr	r5, [r1, #8]
 8001616:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800161a:	4d41      	ldr	r5, [pc, #260]	; (8001720 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800161c:	42ab      	cmp	r3, r5
 800161e:	d059      	beq.n	80016d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8001620:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001624:	42ab      	cmp	r3, r5
 8001626:	d055      	beq.n	80016d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8001628:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800162a:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800162c:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800162e:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8001630:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001632:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001634:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001636:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001638:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800163c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800163e:	6999      	ldr	r1, [r3, #24]
 8001640:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001644:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800164c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800164e:	2300      	movs	r3, #0
 8001650:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8001654:	bd30      	pop	{r4, r5, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001656:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8001658:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800165a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800165c:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 800165e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001662:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001666:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001668:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800166a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800166c:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001670:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001672:	688d      	ldr	r5, [r1, #8]
 8001674:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001678:	4d29      	ldr	r5, [pc, #164]	; (8001720 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800167a:	42ab      	cmp	r3, r5
 800167c:	d040      	beq.n	8001700 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800167e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001682:	42ab      	cmp	r3, r5
 8001684:	d03c      	beq.n	8001700 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 8001686:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001688:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800168a:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800168c:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 800168e:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001690:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001692:	69d9      	ldr	r1, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001696:	f041 0108 	orr.w	r1, r1, #8
 800169a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800169c:	69d9      	ldr	r1, [r3, #28]
 800169e:	f021 0104 	bic.w	r1, r1, #4
 80016a2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	4322      	orrs	r2, r4
 80016a8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80016aa:	2300      	movs	r3, #0
 80016ac:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 80016b0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80016b2:	2002      	movs	r0, #2
}
 80016b4:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80016b6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80016b8:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80016bc:	432a      	orrs	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80016be:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80016c2:	e9d1 e505 	ldrd	lr, r5, [r1, #20]
 80016c6:	ea4e 0e05 	orr.w	lr, lr, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80016ca:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80016ce:	ea4e 0404 	orr.w	r4, lr, r4
 80016d2:	e77a      	b.n	80015ca <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016d4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80016d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016da:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80016de:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016e2:	e9d1 e505 	ldrd	lr, r5, [r1, #20]
 80016e6:	ea4e 0e05 	orr.w	lr, lr, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80016ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80016ee:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80016f2:	e799      	b.n	8001628 <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016f4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80016f6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016fa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80016fe:	e736      	b.n	800156e <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001700:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001706:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800170a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800170e:	e9d1 e505 	ldrd	lr, r5, [r1, #20]
 8001712:	ea4e 0e05 	orr.w	lr, lr, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800171a:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 800171e:	e7b2      	b.n	8001686 <HAL_TIM_PWM_ConfigChannel+0x182>
 8001720:	40012c00 	.word	0x40012c00

08001724 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001724:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001728:	2b01      	cmp	r3, #1
 800172a:	d075      	beq.n	8001818 <HAL_TIM_ConfigClockSource+0xf4>
 800172c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800172e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8001730:	2001      	movs	r0, #1
{
 8001732:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8001734:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8001736:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800173a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800173e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001740:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001744:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001748:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800174a:	680b      	ldr	r3, [r1, #0]
 800174c:	2b60      	cmp	r3, #96	; 0x60
 800174e:	d065      	beq.n	800181c <HAL_TIM_ConfigClockSource+0xf8>
 8001750:	d824      	bhi.n	800179c <HAL_TIM_ConfigClockSource+0x78>
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	d07c      	beq.n	8001850 <HAL_TIM_ConfigClockSource+0x12c>
 8001756:	d94b      	bls.n	80017f0 <HAL_TIM_ConfigClockSource+0xcc>
 8001758:	2b50      	cmp	r3, #80	; 0x50
 800175a:	d117      	bne.n	800178c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800175c:	6848      	ldr	r0, [r1, #4]
 800175e:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001760:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001762:	6a23      	ldr	r3, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001764:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001768:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800176a:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001772:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001778:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800177c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800177e:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001780:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001786:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800178a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800178c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800178e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001790:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001794:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8001798:	bc30      	pop	{r4, r5}
 800179a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800179c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a0:	d038      	beq.n	8001814 <HAL_TIM_ConfigClockSource+0xf0>
 80017a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a6:	d110      	bne.n	80017ca <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017a8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80017ac:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017ae:	432b      	orrs	r3, r5
 80017b0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017b2:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80017ba:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017bc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017be:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017c0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c6:	60a3      	str	r3, [r4, #8]
      break;
 80017c8:	e7e0      	b.n	800178c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80017ca:	2b70      	cmp	r3, #112	; 0x70
 80017cc:	d1de      	bne.n	800178c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017ce:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80017d2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017d4:	432b      	orrs	r3, r5
 80017d6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017d8:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80017e0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80017e2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80017e4:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017e6:	2000      	movs	r0, #0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80017ec:	60a3      	str	r3, [r4, #8]
      break;
 80017ee:	e7cd      	b.n	800178c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d002      	beq.n	80017fa <HAL_TIM_ConfigClockSource+0xd6>
 80017f4:	d90a      	bls.n	800180c <HAL_TIM_ConfigClockSource+0xe8>
 80017f6:	2b30      	cmp	r3, #48	; 0x30
 80017f8:	d1c8      	bne.n	800178c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80017fa:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 80017fe:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001802:	430b      	orrs	r3, r1
 8001804:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001808:	60a3      	str	r3, [r4, #8]
}
 800180a:	e7bf      	b.n	800178c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800180c:	f033 0110 	bics.w	r1, r3, #16
 8001810:	d1bc      	bne.n	800178c <HAL_TIM_ConfigClockSource+0x68>
 8001812:	e7f2      	b.n	80017fa <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2000      	movs	r0, #0
 8001816:	e7b9      	b.n	800178c <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8001818:	2002      	movs	r0, #2
}
 800181a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800181c:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800181e:	6848      	ldr	r0, [r1, #4]
 8001820:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001822:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001824:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001828:	f021 0110 	bic.w	r1, r1, #16
 800182c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800182e:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001830:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001834:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001838:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800183c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800183e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001840:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001842:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8001844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001848:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800184c:	60a3      	str	r3, [r4, #8]
}
 800184e:	e79d      	b.n	800178c <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001850:	6848      	ldr	r0, [r1, #4]
 8001852:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001854:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001856:	6a23      	ldr	r3, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001858:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001862:	69a3      	ldr	r3, [r4, #24]
  tmpccer |= TIM_ICPolarity;
 8001864:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800186a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800186e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001870:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001872:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8001876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800187a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800187e:	60a3      	str	r3, [r4, #8]
}
 8001880:	e784      	b.n	800178c <HAL_TIM_ConfigClockSource+0x68>
 8001882:	bf00      	nop

08001884 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8001884:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001888:	2a01      	cmp	r2, #1
 800188a:	d04b      	beq.n	8001924 <HAL_TIM_SlaveConfigSynchro+0xa0>
 800188c:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800188e:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8001890:	2001      	movs	r0, #1
{
 8001892:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 8001894:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 8001896:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800189e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80018a0:	6848      	ldr	r0, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80018a6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80018a8:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80018aa:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80018ae:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 80018b0:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80018b2:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80018b4:	d05b      	beq.n	800196e <HAL_TIM_SlaveConfigSynchro+0xea>
 80018b6:	d90f      	bls.n	80018d8 <HAL_TIM_SlaveConfigSynchro+0x54>
 80018b8:	2860      	cmp	r0, #96	; 0x60
 80018ba:	d035      	beq.n	8001928 <HAL_TIM_SlaveConfigSynchro+0xa4>
 80018bc:	2870      	cmp	r0, #112	; 0x70
 80018be:	d10e      	bne.n	80018de <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018c0:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80018c4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018c6:	432a      	orrs	r2, r5
 80018c8:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018ca:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80018d2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80018d4:	60a2      	str	r2, [r4, #8]
 80018d6:	e010      	b.n	80018fa <HAL_TIM_SlaveConfigSynchro+0x76>
  switch (sSlaveConfig->InputTrigger)
 80018d8:	2840      	cmp	r0, #64	; 0x40
 80018da:	d038      	beq.n	800194e <HAL_TIM_SlaveConfigSynchro+0xca>
 80018dc:	d908      	bls.n	80018f0 <HAL_TIM_SlaveConfigSynchro+0x6c>
    htim->State = HAL_TIM_STATE_READY;
 80018de:	2201      	movs	r2, #1
    __HAL_UNLOCK(htim);
 80018e0:	2100      	movs	r1, #0
    htim->State = HAL_TIM_STATE_READY;
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80018e6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80018ea:	4610      	mov	r0, r2
}
 80018ec:	bc70      	pop	{r4, r5, r6}
 80018ee:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80018f0:	2820      	cmp	r0, #32
 80018f2:	d002      	beq.n	80018fa <HAL_TIM_SlaveConfigSynchro+0x76>
 80018f4:	d912      	bls.n	800191c <HAL_TIM_SlaveConfigSynchro+0x98>
 80018f6:	2830      	cmp	r0, #48	; 0x30
 80018f8:	d1f1      	bne.n	80018de <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_UNLOCK(htim);
 80018fa:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80018fc:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80018fe:	68e2      	ldr	r2, [r4, #12]
  return HAL_OK;
 8001900:	4608      	mov	r0, r1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001906:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001908:	68e2      	ldr	r2, [r4, #12]
 800190a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800190e:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001910:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001914:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
}
 8001918:	bc70      	pop	{r4, r5, r6}
 800191a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800191c:	f030 0210 	bics.w	r2, r0, #16
 8001920:	d1dd      	bne.n	80018de <HAL_TIM_SlaveConfigSynchro+0x5a>
 8001922:	e7ea      	b.n	80018fa <HAL_TIM_SlaveConfigSynchro+0x76>
  __HAL_LOCK(htim);
 8001924:	2002      	movs	r0, #2
}
 8001926:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8001928:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800192a:	6888      	ldr	r0, [r1, #8]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800192c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001930:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001934:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001936:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001938:	f020 0010 	bic.w	r0, r0, #16
 800193c:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800193e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001940:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001944:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001948:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800194a:	6222      	str	r2, [r4, #32]
 800194c:	e7d5      	b.n	80018fa <HAL_TIM_SlaveConfigSynchro+0x76>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800194e:	2d05      	cmp	r5, #5
 8001950:	d0c5      	beq.n	80018de <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8001952:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001954:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001956:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001958:	f020 0001 	bic.w	r0, r0, #1
 800195c:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800195e:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001960:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001964:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001968:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 800196a:	6225      	str	r5, [r4, #32]
      break;
 800196c:	e7c5      	b.n	80018fa <HAL_TIM_SlaveConfigSynchro+0x76>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800196e:	6888      	ldr	r0, [r1, #8]
 8001970:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001972:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001974:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8001978:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800197a:	6a20      	ldr	r0, [r4, #32]
 800197c:	f020 0001 	bic.w	r0, r0, #1
 8001980:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001982:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001984:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001988:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800198c:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800198e:	6221      	str	r1, [r4, #32]
 8001990:	e7b3      	b.n	80018fa <HAL_TIM_SlaveConfigSynchro+0x76>
 8001992:	bf00      	nop

08001994 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001994:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001998:	2a01      	cmp	r2, #1
 800199a:	d02f      	beq.n	80019fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800199c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019a0:	681a      	ldr	r2, [r3, #0]
{
 80019a2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80019a4:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80019a8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019aa:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ac:	4d14      	ldr	r5, [pc, #80]	; (8001a00 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80019ae:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80019b2:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b4:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80019b6:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 80019b8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ba:	d011      	beq.n	80019e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80019bc:	4811      	ldr	r0, [pc, #68]	; (8001a04 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80019be:	4282      	cmp	r2, r0
 80019c0:	d00e      	beq.n	80019e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80019c2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80019c6:	d00b      	beq.n	80019e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80019c8:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 80019cc:	4282      	cmp	r2, r0
 80019ce:	d007      	beq.n	80019e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80019d0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80019d4:	4282      	cmp	r2, r0
 80019d6:	d003      	beq.n	80019e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80019d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80019dc:	4282      	cmp	r2, r0
 80019de:	d104      	bne.n	80019ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019e0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80019e2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80019e6:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80019e8:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80019ea:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80019ec:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80019f2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f6:	4610      	mov	r0, r2
}
 80019f8:	bc30      	pop	{r4, r5}
 80019fa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80019fc:	2002      	movs	r0, #2
}
 80019fe:	4770      	bx	lr
 8001a00:	40012c00 	.word	0x40012c00
 8001a04:	40013400 	.word	0x40013400

08001a08 <__libc_init_array>:
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	2600      	movs	r6, #0
 8001a0c:	4d0c      	ldr	r5, [pc, #48]	; (8001a40 <__libc_init_array+0x38>)
 8001a0e:	4c0d      	ldr	r4, [pc, #52]	; (8001a44 <__libc_init_array+0x3c>)
 8001a10:	1b64      	subs	r4, r4, r5
 8001a12:	10a4      	asrs	r4, r4, #2
 8001a14:	42a6      	cmp	r6, r4
 8001a16:	d109      	bne.n	8001a2c <__libc_init_array+0x24>
 8001a18:	f000 f81a 	bl	8001a50 <_init>
 8001a1c:	2600      	movs	r6, #0
 8001a1e:	4d0a      	ldr	r5, [pc, #40]	; (8001a48 <__libc_init_array+0x40>)
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <__libc_init_array+0x44>)
 8001a22:	1b64      	subs	r4, r4, r5
 8001a24:	10a4      	asrs	r4, r4, #2
 8001a26:	42a6      	cmp	r6, r4
 8001a28:	d105      	bne.n	8001a36 <__libc_init_array+0x2e>
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}
 8001a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a30:	4798      	blx	r3
 8001a32:	3601      	adds	r6, #1
 8001a34:	e7ee      	b.n	8001a14 <__libc_init_array+0xc>
 8001a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a3a:	4798      	blx	r3
 8001a3c:	3601      	adds	r6, #1
 8001a3e:	e7f2      	b.n	8001a26 <__libc_init_array+0x1e>
 8001a40:	08001a8c 	.word	0x08001a8c
 8001a44:	08001a8c 	.word	0x08001a8c
 8001a48:	08001a8c 	.word	0x08001a8c
 8001a4c:	08001a90 	.word	0x08001a90

08001a50 <_init>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	bf00      	nop
 8001a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a56:	bc08      	pop	{r3}
 8001a58:	469e      	mov	lr, r3
 8001a5a:	4770      	bx	lr

08001a5c <_fini>:
 8001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5e:	bf00      	nop
 8001a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a62:	bc08      	pop	{r3}
 8001a64:	469e      	mov	lr, r3
 8001a66:	4770      	bx	lr
